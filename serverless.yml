service: rimac-backend-citas

frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs20.x
  region: us-west-1
  stage: dev
  memorySize: 250

  environment:
    DYNAMO_TABLE_NAME: Appointments
    SNS_TOPIC_ARN: arn:aws:sns:us-west-1:011528258636:appointment-topic
    EVENT_BUS_NAME: appointment-confirmations-bus
    RDS_HOST: reto-rimac-appointments-db.ctg808oie5xy.us-west-1.rds.amazonaws.com
    RDS_USER: admin
    RDS_PASSWORD: tazmaniazxc12345
    RDS_PORT: 3306
    RDS_DATABASE: appointments_db
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMO_TABLE_NAME}
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: 
            - arn:aws:sns:${self:provider.region}:*:appointment-topic
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
          Resource:
            - Fn::GetAtt: [SQSPEQueue, Arn]
            - Fn::GetAtt: [SQSCLQueue, Arn]
            - Fn::GetAtt: [ConfirmationsQueue, Arn]
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - arn:aws:events:${self:provider.region}:*:event-bus/appointment-confirmations-bus

functions:
  api:
    handler: src/infrastructure/handler/appointmentHandler.handler
    timeout: 30
    events:
      - http:
          path: appointments
          method: post
      - http:
          path: appointments/{insuredId}
          method: get
      #- sqs:
      #    arn:
      #      Fn::GetAtt: [ConfirmationsQueue, Arn]

  confirmationsHandler:
    handler: src/infrastructure/handler/confirmationsHandler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ConfirmationsQueue, Arn]

  appointment_pe:
    handler: src/infrastructure/handler/appointmentPEHandler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SQSPEQueue, Arn]

  appointment_cl:
    handler: src/infrastructure/handler/appointmentCLHandler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SQSCLQueue, Arn]

resources:
  Resources:
    # DynamoDB Table
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMO_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: insuredId
            AttributeType: S
          - AttributeName: scheduleId
            AttributeType: N
        KeySchema:
          - AttributeName: insuredId
            KeyType: HASH
          - AttributeName: scheduleId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    # SNS Topic
    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: appointment-topic

    # SQS PE
    SQSPEQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_PE
      
    # SQS CL
    SQSCLQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CL
    
    SQSPEQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: SQSPEQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: "sqs:SendMessage"
              Resource:
                Fn::GetAtt: [SQSPEQueue, Arn]
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: AppointmentTopic

    # SQS CL
    SQSCLQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: SQSCLQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: "sqs:SendMessage"
              Resource:
                Fn::GetAtt: [SQSCLQueue, Arn]
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: AppointmentTopic

    AppointmentTopicSubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: 
          Ref: AppointmentTopic
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [SQSPEQueue, Arn]
        FilterPolicy:
          countryISO: ["PE"]

    AppointmentTopicSubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: 
          Ref: AppointmentTopic
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [SQSCLQueue, Arn]
        FilterPolicy:
          countryISO: ["CL"]

    AppointmentConfirmationBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: appointment-confirmations-bus

    ConfirmationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CONFIRMATIONS

    AppointmentConfirmationRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: appointment-confirmations-bus
        EventPattern:
          source:
            - "appointment.confirmation"
        Targets:
          - Arn:
              Fn::GetAtt: [ConfirmationsQueue, Arn]
            Id: "ConfirmationsQueueTarget"

